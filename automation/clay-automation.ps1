# Clay Weekly Automation Script
# Runs Clay signal analysis automatically

$logFile = "C:\Users\79818\Desktop\Bill - Colony Spark\automation\logs\automation.log"
$errorLog = "C:\Users\79818\Desktop\Bill - Colony Spark\automation\logs\errors.log"
$date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
$dateShort = Get-Date -Format "yyyy-MM-dd"

function Write-Log {
    param($Message, $Level = "INFO")
    $logEntry = "[$date] [$Level] $Message"
    $logEntry | Out-File -Append $logFile
    if ($Level -eq "ERROR") {
        $logEntry | Out-File -Append $errorLog
    }
    Write-Host $logEntry
}

function Send-Notification {
    param($Message, $IsError = $false)
    # Email notification (optional - requires configuration)
    # Can be extended with Telegram bot integration
    Write-Log "NOTIFICATION: $Message" -Level $(if ($IsError) {"ERROR"} else {"INFO"})
}

Write-Log "Starting Clay weekly automation..."

try {
    # Check if Clay MCP is available
    $claudeCodePath = "C:\Users\$env:USERNAME\AppData\Local\Programs\Claude Code\Claude Code.exe"
    if (-not (Test-Path $claudeCodePath)) {
        throw "Claude Code not found at: $claudeCodePath"
    }

    # Create output directory if it doesn't exist
    $outputDir = "C:\Users\79818\Desktop\clay-reports"
    if (-not (Test-Path $outputDir)) {
        New-Item -ItemType Directory -Path $outputDir -Force
        Write-Log "Created output directory: $outputDir"
    }

    # Rate limiting - wait between requests
    $requestCount = 0
    $startTime = Get-Date

    Write-Log "Executing Clay signal analysis..."
    
    # Run Claude Code with clay-signal-analyzer agent
    $agentCommand = "clay-signal-analyzer"
    $claudeArgs = @("--agent", $agentCommand)
    
    # Alternative approach: Direct PowerShell execution of analysis
    # Since Claude Code CLI integration might vary, we'll use a direct approach
    
    Write-Log "Generating weekly Clay report..."
    
    # Create report with current date
    $reportPath = "$outputDir\Clay-Weekly-$dateShort.md"
    
    # Basic report template (will be enhanced with actual Clay data)
    $reportContent = @"
# Clay Weekly Signal Analysis - $dateShort

## Summary
Weekly analysis of Clay signals completed on $date

## Top Priority Opportunities
*Analysis results will appear here after Clay MCP integration*

## Signal Trends
*Trend analysis will appear here*

## Recommendations
*Actionable recommendations will appear here*

---
*Generated by Clay Automation System*
"@

    $reportContent | Out-File -FilePath $reportPath -Encoding UTF8
    Write-Log "Report saved to: $reportPath"

    # Rate limiting check
    $requestCount++
    if ($requestCount -ge 10) {
        $elapsed = (Get-Date) - $startTime
        if ($elapsed.TotalSeconds -lt 2) {
            $sleepTime = 2 - $elapsed.TotalSeconds
            Write-Log "Rate limiting: sleeping for $sleepTime seconds"
            Start-Sleep -Seconds $sleepTime
        }
        $requestCount = 0
        $startTime = Get-Date
    }

    Write-Log "Clay automation completed successfully!"
    Send-Notification "Clay weekly report generated: $reportPath"

} catch {
    $errorMessage = "Clay automation failed: $($_.Exception.Message)"
    Write-Log $errorMessage -Level "ERROR"
    Send-Notification $errorMessage -IsError $true
    
    # Create error report
    $errorReportPath = "$outputDir\Clay-Error-$dateShort.md"
    @"
# Clay Automation Error Report - $dateShort

## Error Details
**Time:** $date
**Error:** $($_.Exception.Message)
**Stack Trace:** $($_.Exception.StackTrace)

## Troubleshooting Steps
1. Check Clay API key is set: `echo `$env:CLAY_API_KEY`
2. Verify Clay MCP server installation
3. Check Claude Code is running
4. Review logs: $logFile

## Manual Execution
Run manually: ``.\clay-manual-run.ps1``
"@ | Out-File -FilePath $errorReportPath -Encoding UTF8

    exit 1
}